/// <reference types="cypress" />


it('creat new board, list, card and reset', () => {
    cy.visit('/')
    cy.get('[data-cy="first-board"]')
        .type('New Board{enter}')
    cy.get('[data-cy="add-list-input"]')
        .type('New List{enter}')
    cy.get('[data-cy="new-card"]')
        .click()
    cy.get('[data-cy="new-card-input"]')
        .type('New card{enter}')
    cy.get('[data-cy="board-options"]')
        .click()
    cy.get('[data-cy="delete-board"]')
        .click()
})


it('Favorite Board', () => {
    cy.visit('/')
    cy.get('[data-cy="first-board"]')
        .type('New Board{enter}')
    cy.get('[data-cy="home"]')
        .click()
    cy.get('[data-cy="star"]')
        .click({ force: true })
    cy.get('[data-cy="board-item"]')
        .click()
    cy.get('[data-cy="board-options"]')
        .click()
    cy.get('[data-cy="delete-board"]')
        .click()
})

it('Making Assertions', () => {
    cy.visit('/')
    cy.get('[data-cy="first-board"]')
        .type('New Board{enter}')
    cy.get('[data-cy="add-list-input"]')
        .type('New List{enter}')
    cy.get('[data-cy="new-card"]')
        .click()
    cy.get('[data-cy="new-card-input"]')
        .type('Bread{enter}')
    cy.get('[data-cy="card"]')
        .should('be.visible')
    cy.get('[data-cy="new-card-input"]')
        .type('Juice{enter}')
    cy.get('[data-cy="card"]')
        .should('have.length', 2)
    cy.get('[data-cy="card-checkbox"]')
        .first()
        .check()
    cy.get('[data-cy="card-checkbox"]')
        .last()
        .uncheck()
    cy.get('[data-cy="card-checkbox"]')
        .should('be.checked')
    cy.get('[data-cy="due-date"]')
        .should('have.class', 'completed') // Verificando a classe
    cy.get('[data-cy="due-date"]')
        .should('have.class', 'text-gray9') // Verificando a classe
    cy.get('[data-cy="list-name"]')
        .should('have.value', 'New List')
    cy.get('[data-cy="card-text"]')
        .first()
        .should('have.text', 'Bread')
    cy.get('[data-cy="board-options"]')
        .click()
    cy.get('[data-cy="delete-board"]')
        .click()



})

it('Chaining', () => {
    cy.visit('/')
    cy.get('[data-cy="first-board"]')
        .type('New Board{enter}')
    cy.get('[data-cy="add-list-input"]')
        .type('New List{enter}')
    cy.get('[data-cy="new-card"]')
        .click()
    cy.get('[data-cy="new-card-input"]')
        .type('Bread{enter}')
    cy.get('[data-cy="card"]')
        .should('be.visible')
    cy.get('[data-cy="new-card-input"]')
        .type('Juice{enter}')
    cy.get('[data-cy="create-list"]').click()
    cy.get('[data-cy="add-list-input"]').type('Toast{enter}')
    cy.get('[data-cy="new-card"]').eq(1).click()
    cy.get('[data-cy="new-card-input"]').type('Toast{enter}')
    cy.get('[data-cy="new-card-input"]').type('Fruit{enter}')
    cy.get('[data-cy="board-options"]')
        .click()
    cy.get('[data-cy="delete-board"]')
        .click()

    // Chaining é usar ações filhas direto na linha da ação pai
})

it('Retrying', () => {
    cy.visit('/')
    cy.get('[data-cy="first-board"]')
        .type('New Board{enter}')
    cy.get('[data-cy="add-list-input"]')
        .type('New List{enter}')
    cy.get('[data-cy="new-card"]')
        .click()
    cy.get('[data-cy="new-card-input"]')
        .type('Bread{enter}')
    cy.get('[data-cy="card"]')
        .should('be.visible')
    cy.get('[data-cy="new-card-input"]')
        .type('Juice{enter}')
    cy.get('[data-cy="create-list"]').click()
    cy.get('[data-cy="add-list-input"]').type('Toast{enter}')
    cy.get('[data-cy="new-card"]').eq(1).click()
    cy.get('[data-cy="new-card-input"]').type('Toast{enter}')
    cy.get('[data-cy="new-card-input"]').type('Fruit{enter}')
    cy.get('[data-cy="list"]')
    .contains('[data-cy="card-text"]', 'Juice')
    .should('have.text', 'Juice')


    })